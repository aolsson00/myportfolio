#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = FALSE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = TRUE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = TRUE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = values ),show.legend = TRUE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group_colors ),show.legend = TRUE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = TRUE, size = 5.0e-20) +
scale_fill_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = TRUE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ),show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group, show.legend = FALSE ), show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), show.legend = FALSE, color = "black", alpha = 0.3) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = region), show.legend = FALSE, color = "black", alpha = 1.0) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = group), show.legend = FALSE, color = "black", alpha = 1.0) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = group), show.legend = FALSE, color = "black", alpha = 1.0) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20, alpha = 0.5) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
knitr::opts_chunk$set(echo = TRUE)
library(maps)
library(leaflet)
library(dplyr)
library(ggplot2)
# read in us census document with zipcodes and coordinates
zip_data <- read.csv("uszips.csv")
# fix the unintended removal of 0s infront of zipcodes
zip_data$zip <- sprintf("%05d", as.numeric(zip_data$zip))
# remove unnecessary columns from imported zipcodes df make subset
zip_df_subset <- subset(zip_data, select = c(zip, lat, lng, city, state_name))
# rename lng to long in zip_df_subset
zip_df_subset <- zip_df_subset %>% rename(long = lng, region = state_name)
# convert region all lower case in zip df
zip_df_subset <- zip_df_subset %>%
mutate(region = tolower(region))
#Get a map of the US and color by state
usa_map <- map_data("state") #get a map of the US states
# create the continental usa limits
bbox <- list(
xmin = -125,  # Minimum longitude
xmax = -65,   # Maximum longitude
ymin = 25,    # Minimum latitude
ymax = 50     # Maximum latitude
)
# Filter usa_map data within the bounds box
usa_map_continent <- usa_map %>%
filter(long >= bbox$xmin & long <= bbox$xmax &
lat >= bbox$ymin & lat <= bbox$ymax)
# Filter zipcode_data within the bounds box
zipcode_data_continent <- zip_df_subset %>%
filter(long >= bbox$xmin & long <= bbox$xmax &
lat >= bbox$ymin & lat <= bbox$ymax)
# Plotting the map
ggplot(aes(x=long, y=lat), data = usa_map_continent) +
geom_polygon(aes(group = group, fill = group), show.legend = FALSE, color = "grey50", alpha = 1.0 ) +
geom_point(data = zipcode_data_continent, aes(x = long, y = lat), color = "red", size = 5.0e-25, alpha = 0.35) +
theme_void() +
labs(title = "Postal Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
zip_pop <- select(zip_data, c(zip, population))
zip_code_pop <- left_join(zipcode_data_continent,zip_pop, "zip")
# Plotting the map
# ggplot(aes(x=long, y=lat), data = usa_map_continent) +
#   geom_polygon(aes(group = group), show.legend = FALSE, color = "black", alpha = 1.0 ) +
#   geom_point(data = zip_code_pop, aes(x = long, y = lat, fill = population), color = "grey50", size = 5.0e-25, alpha = 0.35) +
#   #scale_fill_manual(values = c("red", "blue", "green")) +
#   theme_void() +
#   labs(title = "Postal Zip-codes Across the United States") +
#   theme(plot.title = element_text(hjust = 0.5)) +
#   coord_quickmap()
library(ggplot2)
# Create groups based on population values
zip_code_pop$group <- cut(zip_code_pop$population,
breaks = c(0, 1000, 10000, 50000, Inf),
labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
# Define colors for each group
group_colors <- c("Group 1" = "green", "Group 2" = "yellow", "Group 3" = "orange", "Group 4" = "red")
ggplot() +
geom_polygon(data = usa_map_continent, aes(x = long, y = lat, group = group, fill = group), show.legend = FALSE, color = "black", alpha = 1.0) +
geom_point(data = zip_code_pop, aes(x = long, y = lat, color = group ), show.legend = FALSE, size = 5.0e-20, alpha = 0.5) +
scale_color_manual(values = group_colors) +  # Use the defined colors for the groups
theme_void() +
labs(title = "Population Size of Zip-codes Across the United States") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_quickmap()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align='center')
datasets::AirPassengers
airPassengers <- datasets::AirPassengers
datasets::airmiles
library(dplyr)
data(flights)
library(nycflights13)
data(flights)
force(flights)
View(flights)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(df, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
# Specify the file path where you want to save the .txt file
file_path <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(df, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
# Export the data frame to a .txt file
write.table(df, file = file_path, sep = "/t", quote = FALSE, row.names = FALSE)
# Export the data frame to a .txt file
write.table(data(flights), file = file_path, sep = "/t", quote = FALSE, row.names = FALSE)
# Export the data frame to a .txt file
write.table(flights, file = file_path, sep = "/t", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
flights_head <- head(flights)
flights_head <- head(flights, 50)
write.table(flights_head, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
flights_head <- head(flights, 50)
write.table(flights_head, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
flights_head <- head(flights, 50)
write.table(flights_head, file = file_path, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path1 <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
flights_head <- head(flights, 50)
write.table(flights_head, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
flights_head <- head(flights, 50)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
flights_head_50 <- head(flights, 50)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path1 <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
flights_head_50 <- head(flights, 50)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
# Specify the file path where you want to save the .txt file
file_path1 <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
flights_head_50 <- head(flights, 50)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
flights_head_50 <- head(flights, 50)
# Specify the file path where you want to save the .txt file
file_path1 <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
library(dplyr)
library(nycflights13)
df<-data(flights)
flights_head_50 <- head(df, 50)
# Specify the file path where you want to save the .txt file
file_path1 <- "/Users/olssons/flights.txt"  # Replace this with your desired file path
file_path2 <- "/Users/olssons/flights_head_50.txt"  # Replace this with your desired file path
# Export the data frame to a .txt file
write.table(flights, file = file_path1, sep = ",", quote = FALSE, row.names = FALSE)
write.table(flights_head_50, file = file_path2, sep = ",", quote = FALSE, row.names = FALSE)
View(flights)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bifx551',
token='90CF4C3937A973965C14C42D128AAB72',
secret='<SECRET>')
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/GitHub/BIFX551_SPRING24/Week 11/Code Examples/FirstApp')
runApp('Documents/BIFX551/MyFirstApp/WinterPrecipitation')
runApp('Documents/GitHub/BIFX551_SPRING24/Week 11/ajo2_MyFirstApp/USCISHistoricalProcessingTimes')
shiny::runApp('Documents/BIFX551/Final Project')
