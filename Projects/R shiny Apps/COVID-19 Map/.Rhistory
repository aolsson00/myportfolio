runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
# Get unique values of Year_Month
unique_year_month <- unique(deaths_by_year_state$Year_Month)
# Assign consecutive numbers starting at 1 to a new column
deaths_by_year_state$new_column <- match(deaths_by_year_state$Year_Month, unique_year_month)
View(deaths_by_year_state)
# Assign consecutive numbers starting at 1 to a new column
deaths_by_year_state$Year_Month_Cons <- match(deaths_by_year_state$Year_Month, unique_year_month)
# Load Rpackages
library(shiny)
library(shinythemes)
library(dplyr)
library(echarts4r)
library(lubridate)
library(tidyr)
covid_data <- read.csv("/Users/olssons/Documents/BIFX551/Final Project/Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State_20240426.csv")
deaths_by_year_state <- covid_data %>%
group_by(State, Year, Month) %>%
summarise_at(c("COVID.19.Deaths", "Pneumonia.Deaths", "Influenza.Deaths"), sum, na.rm=TRUE) %>%
filter(State != "United States") %>%
rename("SARS-CoV-2" = COVID.19.Deaths,
Pneumonia = Pneumonia.Deaths,
Influenza = Influenza.Deaths)
deaths_by_year_state <- na.omit(deaths_by_year_state)
deaths_by_year_state <- deaths_by_year_state %>%
pivot_longer(cols = c("SARS-CoV-2", "Pneumonia", "Influenza"), names_to = "Illness", values_to = "total_deaths")
# Load required libraries
library(dplyr)
library(tidyr)
deaths_by_year_state$Month <- sprintf("%02d", deaths_by_year_state$Month)
# Create a new column by combining year and month
deaths_by_year_state <- deaths_by_year_state %>%
mutate(Year_Month = paste(Year, Month, sep = "."))
# Get unique values of Year_Month
unique_year_month <- unique(deaths_by_year_state$Year_Month)
# Assign consecutive numbers starting at 1 to a new column
deaths_by_year_state$Year_Month_Cons <- match(deaths_by_year_state$Year_Month, unique_year_month)
# Load Rpackages
library(shiny)
library(shinythemes)
library(dplyr)
library(echarts4r)
library(lubridate)
library(tidyr)
covid_data <- read.csv("/Users/olssons/Documents/BIFX551/Final Project/Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State_20240426.csv")
deaths_by_year_state <- covid_data %>%
group_by(State, Year, Month) %>%
summarise_at(c("COVID.19.Deaths", "Pneumonia.Deaths", "Influenza.Deaths"), sum, na.rm=TRUE) %>%
filter(State != "United States") %>%
rename("SARS-CoV-2" = COVID.19.Deaths,
Pneumonia = Pneumonia.Deaths,
Influenza = Influenza.Deaths)
deaths_by_year_state <- na.omit(deaths_by_year_state)
deaths_by_year_state <- deaths_by_year_state %>%
pivot_longer(cols = c("SARS-CoV-2", "Pneumonia", "Influenza"), names_to = "Illness", values_to = "total_deaths")
deaths_by_year_state$Month <- sprintf("%02d", deaths_by_year_state$Month)
# Create a new column by combining year and month
deaths_by_year_state <- deaths_by_year_state %>%
mutate(Year_Month = paste(Year, Month, sep = "."))
# Get unique values of Year_Month
unique_year_month <- unique(deaths_by_year_state$Year_Month)
# Assign consecutive numbers starting at 1 to a new column
deaths_by_year_state$Year_Month_Cons <- match(deaths_by_year_state$Year_Month, unique_year_month)
# View the updated data frame
head(df)
View(deaths_by_year_state)
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
library(echarts4r)
# Sample data
data <- data.frame(
x = 1:10,
y = rnorm(10),
info = LETTERS[1:10]  # Additional information to display in tooltips
)
# Create scatter plot with tooltips
scatter_plot <- data %>%
e_charts(x) %>%
e_scatter(y, name = "Value") %>%
e_tooltip(formatter = htmlwidgets::JS("function(params) { return params.data.info; }"))
# Render the plot
scatter_plot
View(scatter_plot)
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
# Update UI to include text output for current year and month
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel("SARS-CoV-2 -- Final Project for BIFX551"),
sidebarLayout(
sidebarPanel(
sliderInput("year_month_slider",
label="Select Date:",
min = 1,
max = 1, # Set initial max value to 1
value = 1,
animate = animationOptions(interval = 1200, loop = FALSE)),
checkboxGroupInput(
"Illness", "Filter by Illness",
choices = c("SARS-CoV-2", "Pneumonia", "Influenza"),
selected = c("SARS-CoV-2", "Pneumonia", "Influenza")),
textOutput("current_year_month")  # Display current year and month
),
mainPanel(
echarts4rOutput("plot_map")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
# Load Rpackages
library(shiny)
library(shinythemes)
library(dplyr)
library(echarts4r)
library(lubridate)
library(tidyr)
covid_data <- read.csv("/Users/olssons/Documents/BIFX551/Final Project/Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State_20240426.csv")
deaths_by_year_state <- covid_data %>%
group_by(State, Year, Month) %>%
summarise_at(c("COVID.19.Deaths", "Pneumonia.Deaths", "Influenza.Deaths"), sum, na.rm=TRUE) %>%
filter(State != "United States") %>%
rename("SARS-CoV-2" = COVID.19.Deaths,
Pneumonia = Pneumonia.Deaths,
Influenza = Influenza.Deaths)
deaths_by_year_state <- na.omit(deaths_by_year_state)
deaths_by_year_state <- deaths_by_year_state %>%
pivot_longer(cols = c("SARS-CoV-2", "Pneumonia", "Influenza"), names_to = "Illness", values_to = "total_deaths")
# Load required libraries
library(dplyr)
library(tidyr)
deaths_by_year_state$Month <- sprintf("%02d", deaths_by_year_state$Month)
# Create a new column by combining year and month
deaths_by_year_state <- deaths_by_year_state %>%
mutate(Year_Month = paste(Year, Month, sep = "."))
# View the updated data frame
head(df)
plot_map <- function(source_data) {
json <- jsonlite::read_json("https://raw.githubusercontent.com/shawnbot/topogram/master/data/us-states.geojson")
## remove alaska and hawaii
json$features <- Filter(function(x) !x$properties$name %in% c("Alaska", "Hawaii"), json$features)
source_data %>%
echarts4r::e_charts(x = State) %>%
echarts4r::e_map_register("USA", json) %>%
echarts4r::e_map(total_deaths, map = "USA") %>%
echarts4r::e_visual_map(
inRange = list(color = c("#FED2D2", "#7a0000")),
min = min(source_data$total_deaths, na.rm = TRUE),
max = max(source_data$total_deaths, na.rm = TRUE)
)
}
# Define UI
ui <- fluidPage(
#Setting the theme
theme = shinytheme("cosmo"),
#Setting the title
titlePanel("SARS-CoV-2 -- Final Project for BIFX551"),
# Sidebar with a selection input for variable by days
sidebarLayout(
sidebarPanel(
sliderInput("year_month_slider",
label="Select Date:",
min=1,
max=length(unique(deaths_by_year_state$Year_Month)),
value=1,
step=1,
animate =
animationOptions(interval = 1200, loop = FALSE)),
# selectInput('Year', 'Select Year', unique(deaths_by_year_state$Year)),
# selectInput('Month', 'Select Month', unique(deaths_by_year_state$Month)),
checkboxGroupInput(
"Illness", "Filter by Illness",
choices = c("SARS-CoV-2", "Pneumonia", "Influenza"),
selected = c("SARS-CoV-2", "Pneumonia", "Influenza")),
),
mainPanel(
echarts4rOutput("plot_map")
)
)
)
server <- function(input, output, session) {
# Define a reactive expression to get the unique values of Year_Month
available_year_months <- reactive({
unique(deaths_by_year_state$Year_Month)
})
# Update the slider input based on the available Year_Month values
observe({
updateSliderInput(session, "year_month_slider",
min = 1,
max = length(available_year_months()),
value = 1,
step = 1,
ticks = seq(1, length(available_year_months())),
labels = available_year_months())
})
# Reactive expression to get the current value of the slider
current_year_month <- reactive({
selected_index <- input$year_month_slider
selected_year_month <- available_year_months()[selected_index]
return(selected_year_month)
})
output$plot_map <- renderEcharts4r({
req(input$Illness)
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Filter the data based on the selected Year_Month and Illness
filtered_data <- deaths_by_year_state %>%
filter(Year_Month == selected_year_month & Illness %in% input$Illness)
plot_map(filtered_data)
})
# Display current year and month value
output$current_year_month <- renderText({
current_year_month()
})
}
# Update UI to include text output for current year and month
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel("SARS-CoV-2 -- Final Project for BIFX551"),
sidebarLayout(
sidebarPanel(
sliderInput("year_month_slider",
label="Select Date:",
min = 1,
max = 1, # Set initial max value to 1
value = 1,
animate = animationOptions(interval = 1200, loop = FALSE)),
checkboxGroupInput(
"Illness", "Filter by Illness",
choices = c("SARS-CoV-2", "Pneumonia", "Influenza"),
selected = c("SARS-CoV-2", "Pneumonia", "Influenza")),
textOutput("current_year_month")  # Display current year and month
),
mainPanel(
echarts4rOutput("plot_map")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
source("~/Documents/BIFX551/Final Project/app.R", echo=TRUE)
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
install.packages("shinydashboard")
install.packages("shinyWidgets")
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinydashboard")
shiny::runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Reactive expression to get the current value of the slider
current_year_month <- reactive({
selected_index <- input$year_month_slider
selected_year_month <- unique(deaths_by_year_state$Year_Month)[selected_index]
return(selected_year_month)
})
output$plot_map <- renderEcharts4r({
req(input$Illness)
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Filter the data based on the selected Year_Month and Illness
filtered_data <- deaths_by_year_state %>%
filter(Year_Month == selected_year_month & Illness %in% input$Illness)
plot_map(filtered_data)
})
# Define server
server <- function(input, output, session) {
# Reactive expression to get the current value of the slider
current_year_month <- reactive({
selected_index <- input$year_month_slider
selected_year_month <- unique(deaths_by_year_state$Year_Month)[selected_index]
return(selected_year_month)
})
output$plot_map <- renderEcharts4r({
req(input$Illness)
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Filter the data based on the selected Year_Month and Illness
filtered_data <- deaths_by_year_state %>%
filter(Year_Month == selected_year_month & Illness %in% input$Illness)
plot_map(filtered_data)
})
}
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
# Load Rpackages
library(shiny)
library(shinythemes)
library(dplyr)
library(echarts4r)
library(lubridate)
library(tidyr)
library(shinydashboard)
library(shinyWidgets)
# Import and tidy data
covid_data <- read.csv("/Users/olssons/Documents/BIFX551/Final Project/Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State_20240426.csv")
deaths_by_year_state <- covid_data %>%
group_by(State, Year, Month) %>%
summarise_at(c("COVID.19.Deaths", "Pneumonia.Deaths", "Influenza.Deaths"), sum, na.rm=TRUE) %>%
filter(State != "United States") %>%
rename("SARS-CoV-2" = COVID.19.Deaths,
Pneumonia = Pneumonia.Deaths,
Influenza = Influenza.Deaths)
deaths_by_year_state <- na.omit(deaths_by_year_state)
deaths_by_year_state <- deaths_by_year_state %>%
pivot_longer(cols = c("SARS-CoV-2", "Pneumonia", "Influenza"), names_to = "Illness", values_to = "total_deaths")
deaths_by_year_state$Month <- sprintf("%02d", deaths_by_year_state$Month)
# Create a new column by combining year and month
deaths_by_year_state <- deaths_by_year_state %>%
mutate(Year_Month = paste(Year, Month, sep = "."))
# Define UI
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel("SARS-CoV-2 -- Final Project for BIFX551"),
sidebarLayout(
sidebarPanel(
sliderTextInput("year_month_slider",
label="Select Date:",
choices = unique(deaths_by_year_state$Year_Month),
selected = unique(deaths_by_year_state$Year_Month)[1],
animate = animationOptions(interval = 1200, loop = FALSE)),
checkboxGroupInput(
"Illness", "Filter by Illness",
choices = c("SARS-CoV-2", "Pneumonia", "Influenza"),
selected = c("SARS-CoV-2", "Pneumonia", "Influenza")),
),
mainPanel(
echarts4rOutput("plot_map")
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to get the current value of the slider
current_year_month <- reactive({
selected_text <- input$year_month_slider
selected_index <- which(unique(deaths_by_year_state$Year_Month) == selected_text)
selected_year_month <- unique(deaths_by_year_state$Year_Month)[selected_index]
return(selected_year_month)
})
output$plot_map <- renderEcharts4r({
req(input$Illness)
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Filter the data based on the selected Year_Month and Illness
filtered_data <- deaths_by_year_state %>%
filter(Year_Month == selected_year_month & Illness %in% input$Illness)
plot_map(filtered_data)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(deaths_by_year_state)
values_not_two_digits <- deaths_by_year_state$Month[!grepl("^\\d{2}$", deaths_by_year_state$Month)]
print(values_not_two_digits)
runApp('Documents/BIFX551/Final Project')
distinct_values <- unique(deaths_by_year_state$Year_Month)
print(distinct_values)
runApp('Documents/BIFX551/Final Project')
# Load Rpackages
library(shiny)
library(shinythemes)
library(dplyr)
library(echarts4r)
library(lubridate)
library(tidyr)
library(shinydashboard)
library(shinyWidgets)
# Import and tidy data
covid_data <- read.csv("/Users/olssons/Documents/BIFX551/Final Project/Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State_20240426.csv")
deaths_by_year_state <- covid_data %>%
group_by(State, Year, Month) %>%
summarise_at(c("COVID.19.Deaths", "Pneumonia.Deaths", "Influenza.Deaths"), sum, na.rm=TRUE) %>%
filter(State != "United States") %>%
rename("SARS-CoV-2" = COVID.19.Deaths,
Pneumonia = Pneumonia.Deaths,
Influenza = Influenza.Deaths)
deaths_by_year_state <- na.omit(deaths_by_year_state)
deaths_by_year_state <- deaths_by_year_state %>%
pivot_longer(cols = c("SARS-CoV-2", "Pneumonia", "Influenza"), names_to = "Illness", values_to = "total_deaths")
deaths_by_year_state$Month <- sprintf("%02d", deaths_by_year_state$Month)
# Create a new column by combining year and month
deaths_by_year_state <- deaths_by_year_state %>%
mutate(Year_Month = paste(Year, Month, sep = "."))
# Define UI
ui <- fluidPage(
theme = shinytheme("cosmo"),
titlePanel("SARS-CoV-2 -- Final Project for BIFX551"),
sidebarLayout(
sidebarPanel(
sliderTextInput("year_month_slider",
label="Select Date:",
choices = unique(deaths_by_year_state$Year_Month),
selected = unique(deaths_by_year_state$Year_Month)[1],
animate = animationOptions(interval = 1200, loop = FALSE)),
checkboxGroupInput(
"Illness", "Filter by Illness",
choices = c("SARS-CoV-2", "Pneumonia", "Influenza"),
selected = c("SARS-CoV-2", "Pneumonia", "Influenza")),
),
mainPanel(
echarts4rOutput("plot_map")
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive expression to get the current value of the slider
current_year_month <- reactive({
selected_text <- input$year_month_slider
selected_index <- which(unique(deaths_by_year_state$Year_Month) == selected_text)
selected_year_month <- unique(deaths_by_year_state$Year_Month)[selected_index]
return(selected_year_month)
})
output$plot_map <- renderEcharts4r({
req(input$Illness)
# Get the selected Year_Month value based on the index selected by the slider
selected_year_month <- current_year_month()
# Filter the data based on the selected Year_Month and Illness
filtered_data <- deaths_by_year_state %>%
filter(Year_Month == selected_year_month & Illness %in% input$Illness)
plot_map(filtered_data)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
runApp('Documents/BIFX551/Final Project')
install.packages("zoo")
runApp('Documents/BIFX551/Final Project')
getwd()
shiny::runApp('Documents/BIFX551/Final Project')
shiny::runApp('Documents/GitHub/myportfolio/Projects/R shiny Apps/COVID-19 Map')
setwd("~/Documents/GitHub/myportfolio/Projects/R shiny Apps/COVID-19 Map")
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/BIFX551/Final Project')
runApp('~/Documents/BIFX551/Final Project')
runApp('~/Documents/BIFX551/Final Project')
